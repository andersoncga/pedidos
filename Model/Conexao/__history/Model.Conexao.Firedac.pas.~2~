unit Model.Conexao.Firedac;

interface

uses
  Firedac.Stan.Intf,
  Firedac.Stan.Option,
  Firedac.Stan.Error,
  Firedac.UI.Intf,
  Firedac.Phys.Intf,
  Firedac.Stan.Def,
  Firedac.Stan.Pool,
  Firedac.Stan.Async,
  Firedac.Phys,
  Firedac.Phys.MySQL,
  Firedac.Phys.MySQLDef,
  Firedac.Stan.ExprFuncs,
  Firedac.Phys.SQLiteWrapper.Stat,
  Firedac.VCLUI.Wait,
  Firedac.Comp.Client,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.DataSet,
  Model.Conexao.Interfaces,
  Data.DB;

type
  TModelConexao = class(TInterfacedObject, iConexao)
    private
      FConexao    : TFDConnection;
      FQuery      : TFDQuery;

    public
      constructor Create;
      destructor Destroy; override;
      class function New: iConexao;
      function Params(Param: string; Value: Variant): iConexao;
      function DataSet(DataSource: TDataSource): iConexao; overload;
      function DataSet: TDataSet; overload;
      function ExecSQL: iConexao;
      function Open: iConexao;
      function SQL(Value: string): iConexao;
  end;

implementation

{ TModelConexao }

constructor TModelConexao.Create;
begin

end;

function TModelConexao.DataSet(DataSource: TDataSource): iConexao;
begin

end;

function TModelConexao.DataSet: TDataSet;
begin

end;

destructor TModelConexao.Destroy;
begin

  inherited;
end;

function TModelConexao.ExecSQL: iConexao;
begin

end;

class function TModelConexao.New: iConexao;
begin
  Result  :=  Self.Create;
end;

function TModelConexao.Open: iConexao;
begin

end;

function TModelConexao.Params(Param: string; Value: Variant): iConexao;
begin

end;

function TModelConexao.SQL(Value: string): iConexao;
begin

end;

end.
